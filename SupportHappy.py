import logging
import os
import re
import time
from datetime import datetime

import pymysql
import requests
from dotenv import load_dotenv
from telebot import TeleBot, types
from tabulate import tabulate



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# sudo systemctl stop happylink_bot.service

# =====================================
#        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
# =====================================
load_dotenv()

# =====================================
#        –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# =====================================
BOT_TOKEN = os.getenv('BOT_TOKEN')
URL = os.getenv('VITE_SERVICE_API_URL')
KEY = os.getenv('VITE_SERVICE_API_KEY')

# –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
MESSAGE_DELAY_TIME = 1.1


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='/tmp/SupportBot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(BOT_TOKEN, threaded=False)

# =====================================
#        –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
# =====================================
def get_db_connection():
    return pymysql.connect(
        host=os.getenv('DB_HOST'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME'),
        charset='utf8mb4'
    )

def get_user_by_phone(phone_number: str, telegram_id: int) -> bool | None:
    connection = get_db_connection()
    try:
        with connection.cursor() as cursor:
            user_exists = cursor.execute(
                '''
                SELECT c.id, c.agreement, cp.value phone
                FROM clients c
                LEFT JOIN client_contacts cp 
                    ON cp.agreement_id = c.id
                    AND cp.main = 1
                    AND cp.type = 'PHONE'
                WHERE cp.type = 'PHONE'
                  AND cp.value LIKE %s
                LIMIT 1
                ''',
                ("%" + phone_number)
            )
            if user_exists:
                cursor.execute(
                    '''
                    UPDATE clients
                    LEFT JOIN client_contacts
                        ON clients.id = client_contacts.agreement_id
                        AND client_contacts.main = 1
                        AND client_contacts.type = 'PHONE'
                    SET clients.telegram_chat_id=%s
                    WHERE client_contacts.value LIKE %s
                    ''',
                    (telegram_id, "%" + phone_number)
                )
                connection.commit()
                return True
            return False
    except pymysql.MySQLError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        connection.close()

def get_user_by_telegram_id(telegram_id: int):
    connection = get_db_connection()
    try:
        with connection.cursor() as cursor:
            cursor.execute(
                '''
                SELECT cp.value phone, c.id, c.name
                FROM clients c
                LEFT JOIN client_contacts cp
                    ON cp.agreement_id = c.id
                    AND cp.main = 1
                    AND cp.type = 'PHONE'
                WHERE c.telegram_chat_id=%s
                ''',
                (telegram_id,)
            )
            user_data = cursor.fetchone()
            return user_data
    except pymysql.MySQLError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        connection.close()


# =====================================
#  –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# =====================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['animation', 'audio', 'document', 'photo', 'sticker', 'video', 'video_note', 'voice', 'location', 'dice', 'poll'])
def unsupported_message_handler(message: types.Message):
    user_id = message.chat.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_start = types.KeyboardButton("/start")
    markup.add(button_start)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        user_id,
        "–ù–∞ –∂–∞–ª—å, —è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é —Ü–µ–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. "
        "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Ç–µ–∫—Å—Ç–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏.",
        reply_markup=markup
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ–ø–æ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏–ø—É {message.content_type}.")
        

# =====================================
#        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =====================================
def sanitize_input(input_text: str) -> str:
    return re.sub(r"[<>'\";]", "", input_text)


# =====================================
#        –ú–µ–Ω—é—à–∫–∏
# =====================================

def get_phone_keyboard() -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button = types.KeyboardButton("üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    keyboard.add(button)
    return keyboard

def get_main_menu() -> types.ReplyKeyboardMarkup:
    menu = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    menu.add(
        types.KeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å"),
        types.KeyboardButton("üíØ –ü–ª–∞—Ç–µ–∂—ñ"),
        types.KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞"),
        types.KeyboardButton("üë§ –ö–∞–±—ñ–Ω–µ—Ç"),
        types.KeyboardButton("üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
    )
    return menu

def get_pay_menu() -> types.InlineKeyboardMarkup:
    menu = types.InlineKeyboardMarkup()
    menu.add(
        types.InlineKeyboardButton(
            'üí≥ EasyPay',
            url='https://easypay.ua/ua/catalog/internet/happylink'
        ),
        types.InlineKeyboardButton(
            'üè¶ Privat24',
            url=(
                'https://next.privat24.ua/payments/form/'
                '%7B%22token%22%3A%22b9b67f5b-1f2c-47c4-bb1f-be8d48609dc0%22%7D'
            )
        ),
    )
    menu.add(
        types.InlineKeyboardButton('üìä –†–µ–∫–≤—ñ–∑–∏—Ç–∏', callback_data='show_requisites_handler')
    )
    return menu

# =====================================
#  –õ–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π; –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
# =====================================
user_state = {}

def set_user_state(chat_id: int, state: str | None):
    user_state[chat_id] = state

def get_user_state(chat_id: int) -> str | None:
    return user_state.get(chat_id, None)

# =====================================
#        –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
# =====================================
@bot.message_handler(commands=['start'])
def start_handler(message: types.Message):
    bot.send_message(
        message.chat.id,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ –≤–∞—à–∏–º –¥–æ–≥–æ–≤–æ—Ä–æ–º.",
        reply_markup=get_phone_keyboard()
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start")

@bot.message_handler(content_types=['contact'])
def contact_handler(message: types.Message):
    user_id = message.chat.id
    phone_number = message.contact.phone_number

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")

    try:
        result = get_user_by_phone(phone_number, user_id)
        if result is True:
            time.sleep(MESSAGE_DELAY_TIME)
            bot.send_message(
                user_id,
                (
                    "<b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–Ω–∞–π–¥–µ–Ω–æ!</b>\n"
                    "–©–æ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –± –∑—Ä–æ–±–∏—Ç–∏?"
                ),
                parse_mode="HTML",
                reply_markup=get_main_menu()
            )
        elif result is False:
            bot.send_message(
                user_id,
                "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. "
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é."
            )
        else:
            bot.send_message(user_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(user_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")



@bot.message_handler(func=lambda msg: msg.text == "üí≥ –ë–∞–ª–∞–Ω—Å")
def bill_handler(message: types.Message):
    user_id = message.chat.id

    connection = get_db_connection()
    try:
        with connection.cursor() as cursor:
            cursor.execute(
            '''
            SELECT
                c.agreement,
                c.balance,
                REPLACE(GROUP_CONCAT(DISTINCT bill_prices.name ORDER BY bill_prices.name SEPARATOR ', '), ' ', '\n') AS tariff,
                 CONCAT(
                    REPLACE(ac.name, ' ', '\n'), ', ',
                    REPLACE(s.name, ' ', '\n'), ', ',
                    REPLACE(ah.name, ' ', '\n'), ', –∫–≤. ',
                    REPLACE(c.apartment, ' ', '\n')
                ) AS address
            FROM clients c
            JOIN addr_houses ah ON ah.id = c.house
            JOIN addr_streets s ON s.id = ah.street
            JOIN addr_cities ac ON ac.id = s.city
            JOIN client_prices ON client_prices.agreement = c.id AND client_prices.time_stop IS NULL
            JOIN bill_prices ON bill_prices.id = client_prices.price
            WHERE c.telegram_chat_id=%s
            GROUP BY c.agreement, c.balance, address, c.telegram_chat_id
            ORDER BY client_prices.id DESC
            LIMIT 10;
            ''',
            (user_id,)
            )

            bill_records = cursor.fetchall()
            if bill_records:
                headers = [ "–ë–∞–ª–∞–Ω—Å", "–¢–∞—Ä–∏—Ñ", "–ê–¥—Ä–µ—Å–∞"]
                table = [
                    [
                        f"‚Ç¥{row[1]:.2f}",
                        f"{row[2]}",
                        f"{row[3]}",
                    ]
                    for row in bill_records
                ]

                table_text = tabulate(table, headers=headers, tablefmt="grid")

                # –ü–æ–ª—É—á–∞–µ–º "–î–æ–≥–æ–≤—ñ—Ä" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
                agreement = bill_records[0][0]

                time.sleep(MESSAGE_DELAY_TIME)
                bot.send_message(
                    user_id,
                    text=f"–î–æ–≥–æ–≤—ñ—Ä# {agreement}\n<pre>{table_text}</pre>",
                    parse_mode="HTML"
                )
            else:
                time.sleep(MESSAGE_DELAY_TIME)
                bot.send_message(
                    user_id,
                    "<b>–ù–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ—Å–ª—É–≥</b>. \n –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                    parse_mode="HTML"
                )
    except pymysql.MySQLError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        bot.send_message(user_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        connection.close()


@bot.message_handler(func=lambda msg: msg.text == "üíØ –ü–ª–∞—Ç–µ–∂—ñ") 
def show_payment_handler(message: types.Message):
    user_id = message.chat.id

    connection = get_db_connection()
    try:
        with connection.cursor() as cursor:
            cursor.execute(
                '''
                SELECT p.money,
                       CAST(time AS DATE) time,
                       p.comment,
                       p.payment_type,
                       c.agreement
                FROM paymants p
                JOIN clients c ON p.agreement = c.id
                WHERE c.telegram_chat_id=%s
                ORDER BY time DESC
                LIMIT 12;
                ''',
                (user_id,)
            )
            payment_records = cursor.fetchall()
            if payment_records:
                headers = ["–°—É–º–∞", "–î–∞—Ç–∞", "–û–ø–∏—Å"]
                table = [
                    [
                        f'\u20b4{row[0]}',
                        row[1].strftime("%Y-%m-%d"),
                        row[2] if row[2] else ''
                    ]
                    for row in payment_records
                ]
                # –ü–æ–ª—É—á–∞–µ–º "–î–æ–≥–æ–≤—ñ—Ä" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
                agreement = payment_records[0][4]
                table_text = tabulate(table, headers=headers, tablefmt="grid")

                time.sleep(MESSAGE_DELAY_TIME)
                bot.send_message(
                    user_id,
                    text=f"–î–æ–≥–æ–≤—ñ—Ä# {agreement}\n –æ—Å—Ç–∞–Ω–Ω—ñ 12 –ø–ª–∞—Ç–µ–∂—ñ–≤ \n<pre>{table_text}</pre>",
                    parse_mode="HTML"
                )
            else:
                bot.send_message(
                    user_id,
                    "–ü–ª–∞—Ç–µ–∂—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
                )
    except pymysql.MySQLError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        bot.send_message(user_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        connection.close()



@bot.message_handler(func=lambda msg: msg.text == "üë§ –ö–∞–±—ñ–Ω–µ—Ç")
def lc_handler(message: types.Message):
    user_id = message.chat.id

    time.sleep(MESSAGE_DELAY_TIME)
    bot.send_message(
        user_id,
        '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏:\n [üë§ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç](https://my.happylink.net.ua/)',
        parse_mode="MarkdownV2"
        
    )
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üë§ –ö–∞–±—ñ–Ω–µ—Ç'.")



@bot.message_handler(func=lambda msg: msg.text == "üí∞ –û–ø–ª–∞—Ç–∞")
def pay_handler(message: types.Message):
    user_id = message.chat.id

    time.sleep(MESSAGE_DELAY_TIME)
    bot.send_message(
        user_id,
        "*üí∞ –û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:*",
        parse_mode="MarkdownV2",
        reply_markup=get_pay_menu()
    )
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫'.")



@bot.callback_query_handler(func=lambda call: call.data == 'show_requisites_handler')
def show_requisites_handler(call: types.CallbackQuery):
    user_id = call.message.chat.id

    try:
        data = {
            "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Å—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏": "[–ê–±–æ–Ω–ø–ª–∞—Ç–∞] –≥—Ä–Ω/–º—ñ—Å",
            "–û—Ç—Ä–∏–º—É–≤–∞—á": "–¢–û–í \"–•–µ–ø–ø—ñ–ª—ñ–Ω–∫ –£–∫—Ä–∞—ó–Ω–∞\"",
            "IBAN": "UA113052990000026002035033913",
            "–†–ù–û–ö–ü–ü": "45589308",
            "–í –ê–¢ –ö–ë": "¬´–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫¬ª",
            "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É": "–û–ø–ª–∞—Ç–∞ –∑–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç, –æ—Å–æ–±–æ–≤–∏–π —Ä–∞—Ö—É–Ω–æ–∫ ‚Ññ [–í–∞—à —Ä–∞—Ö—É–Ω–æ–∫]"
        }
        table_text = "\n".join([f"{key}: {value}" for key, value in data.items()])

        time.sleep(MESSAGE_DELAY_TIME)
        bot.send_message(
            user_id,
            f"<b>–ü–ª–∞—Ç—ñ–∂–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n\n{table_text}",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        bot.send_message(user_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")



# =====================================
#   –ë–ª–æ–∫ üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞;
# =====================================
@bot.message_handler(func=lambda msg: msg.text == "üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
def contact_support_handler(message: types.Message):
    user_id = message.chat.id
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –º—ã –∂–¥—ë–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    set_user_state(user_id, "support_waiting_text")

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    support_menu = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_button = types.KeyboardButton("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    support_menu.add(back_button)
    
    time.sleep(MESSAGE_DELAY_TIME)
    msg = bot.send_message(
        user_id,
        "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ "
        "–∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
        reply_markup=support_menu
    )
    bot.register_next_step_handler(msg, process_support_message)

def process_support_message(message: types.Message):
    user_id = message.chat.id
    state = get_user_state(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É &laquo;‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é&raquo;
    if message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é":
        set_user_state(user_id, None)

        time.sleep(MESSAGE_DELAY_TIME)
        bot.send_message(
            user_id,
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_menu_texts = {
        "üí≥ –ë–∞–ª–∞–Ω—Å",
        "üíØ –ü–ª–∞—Ç–µ–∂—ñ",
        "üí∞ –û–ø–ª–∞—Ç–∞",
        "üë§ –ö–∞–±—ñ–Ω–µ—Ç",
        "üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"
    }
    if message.text in main_menu_texts and state == "support_waiting_text":

        time.sleep(MESSAGE_DELAY_TIME)
        bot.send_message(
            user_id,
            "–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, –ø—Ä–æ—Ç–µ –º–∏ –æ—á—ñ–∫—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:"
        )
        bot.register_next_step_handler(message, process_support_message)
        return

    # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    user_data = get_user_by_telegram_id(user_id)

    if not user_data:

        time.sleep(MESSAGE_DELAY_TIME)
        bot.send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Å —É –±–∞–∑—ñ.")
        set_user_state(user_id, None)
        return

    phone, agreement_id, name = user_data
    now = datetime.now()
    dt_string = now.strftime("%d.%m.%Y %H:%M:%S")

    headers = {
        'Content-type': 'application/json',
        'X-Auth-Key': KEY
    }
    body = {
        "agreement_id": agreement_id,
        "reason_id": 10,
        "phone": phone,
        "destination_time": dt_string,
        "comment": "\n" + sanitize_input(message.text)
    }

    try:
        response = requests.post(URL, json=body, headers=headers)
        logging.info(f"–°–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª: {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")

        time.sleep(MESSAGE_DELAY_TIME)
        bot.send_message(
            user_id,
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        set_user_state(user_id, None)
        return
    
    time.sleep(MESSAGE_DELAY_TIME)
    bot.send_message(
        user_id,
        "<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ!</b>\n–û—á—ñ–∫—É–π—Ç–µ, –º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏.",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    set_user_state(user_id, None)

# =====================================
#          –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (main)
# =====================================
def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()

if __name__ == "__main__":
    main()
